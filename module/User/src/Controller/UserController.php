<?php
/**
 * Created by PhpStorm.
 * User: Anastasiia
 * Date: 25.09.2018
 * Time: 10:26
 */

namespace User\Controller;

use User\Entity\User;
use User\Form\RegistrationForm;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;
use Zend\Paginator\Paginator;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;

class UserController extends AbstractActionController
{
    /**
     * Менеджер сущностей.
     * @var Doctrine\ORM\EntityManager
     */
    private $entityManager;

    /**
     * Менеджер постов.
     * @var User\Service\UserManager
     */
    private $userManager;

    /**
     * Конструктор, используемый для внедрения зависимостей в контроллер.
     */
    public function __construct($entityManager, $userManager)
    {
        $this->entityManager = $entityManager;
        $this->userManager = $userManager;
    }

    public function onDispatch(MvcEvent $e)
    {
        $response = parent::onDispatch($e); // TODO: Change the autogenerated stub
        return $response;
    }

    public function registryAction()
    {
        $form = new RegistrationForm();

        if ($this->getRequest()->isPost()) {
            $data = $this->params()->fromPost();
            $form->setData($data);

            if ($form->isValid()) {
                $data = $form->getData();

                if ($data['password'] != $data['re-password']){
                    $form->get('re-password')->setMessages(['Passwords do not match']);
                } else {
                    $result = $this->userManager->addNewUser($data);

                    if ($result != null) {
                        $form->get('login')->setMessages([$result]);
                    } else {
                        return $this->redirect()->toRoute('user');
                    }

                }
            }
        }

        return new ViewModel([
            'form' => $form
        ]);

    }

    public function indexAction()
    {
        $page = $this->params()->fromQuery('page', 1);

        $query = $this->entityManager->getRepository(User::class)
            ->findAllUsers();
        $adapter = new DoctrineAdapter(new ORMPaginator($query, false));
        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage(8);
        $paginator->setCurrentPageNumber($page);

        return new ViewModel([
            'users' => $paginator,
        ]);
    }

    public function blockAction()
    {
        $blockedUserId = $this->params()->fromRoute('id', -1);
        $blockedUser = $this->entityManager->getRepository(User::class)
            ->findOneById($blockedUserId);
        $user = $this->entityManager->getRepository(User::class)
            ->findOneByLogin($this->identity());
        if ($blockedUser == null || $user == null){
            $this->getResponse()->setStatusCode(404);
            return;
        }
        $this->userManager->addUserToBlocked($user, $blockedUser);

        // TODO: AJAX IN ONE.PHTML
    }

    public function unblockAction()
    {
        $blockedUserId = $this->params()->fromRoute('id', -1);
        $blockedUser = $this->entityManager->getRepository(User::class)
            ->findOneById($blockedUserId);
        $user = $this->entityManager->getRepository(User::class)
            ->findOneByLogin($this->identity());
        if ($blockedUser == null || $user == null){
            $this->getResponse()->setStatusCode(404);
            return;
        }
        $this->userManager->deleteUserFromBlocked($user, $blockedUser);

        // TODO: AJAX IN ONE.PHTML, BLOCKED.PHTML
    }
}
